unsigned int *copy_addr; // = &_test_start;
unsigned int copy_count = 0;
const unsigned int sensor_size = 64;
volatile unsigned int *sensor_addr = (int *) 0x10000000;
void copy () {
  int i;
  for (i = 0; i < sensor_size; i++) { // Copy data from sensor controller to DM
    *(copy_addr + i) = sensor_addr[i];
  }
  copy_addr += sensor_size; // Update copy address
  copy_count++;    // Increase copy count
  sensor_addr[0x80] = 1; // Enable sctrl_clear
  sensor_addr[0x80] = 0; // Disable sctrl_clear
  if (copy_count == 8) {
    asm("li t6, 0x80");
    asm("csrc mstatus, t6"); // Disable MPIE of mstatus
  }
  return;
}



int main(void) {
	unsigned int * PE_start_addr        = (unsigned int *) 0x30000000;
	unsigned int * DRAM_img_start_addr  = (unsigned int *) 0x20101000;
	unsigned int * DRAM_ans_start_addr  = (unsigned int *) 0x201fff00;
	
	unsigned int frame_data;
	unsigned int start_address;
	unsigned int data_address;
	unsigned int max_value;
	unsigned int max_x;
	unsigned int max_y;
	//320(x)*240(y)
	unsigned int initial_position_x = 63;
	unsigned int initial_position_y = 121;
	
	unsigned int position_x = 0;
	unsigned int position_y = 0;
	
	unsigned int wait_for_response;
	
	for(unsigned int frame_num = 0; frame_num < 4; frame_num++){
		//start_address = frame_num * 240 * 240;
		
		//initial(train)
		if(frame_num == 0){
			//move frame data from DRAM to PE
			start_address = (frame_num << 15) + (frame_num << 14) + (frame_num << 13) + (frame_num << 8); 
			for(unsigned int y = 0; y < 32; y++){	
				for(unsigned int x = 0; x < 32; x++){
					data_address = start_address + ((initial_position_y + y) << 7) + ((initial_position_y + y) << 6) + ((initial_position_y + y) << 5) + ((initial_position_y + y) << 4) + initial_position_x + x;
					frame_data = *(DRAM_img_start_addr + data_address);
					*(PE_start_addr + (y << 5) + x) = frame_data;
				}
			}
			
			//train instuction
			*(PE_start_addr + 0x00001000) = 0x00000001;
			
			*(DRAM_ans_start_addr + (frame_num << 1) + 0) = initial_position_x;
			*(DRAM_ans_start_addr + (frame_num << 1) + 1) = initial_position_y;
		}
		//track and train
		else{
			//move frame data from DRAM to PE
			start_address = (frame_num << 15) + (frame_num << 14) + (frame_num << 13) + (frame_num << 8); 
			for(unsigned int y = 0; y < 32; y++){	
				for(unsigned int x = 0; x < 32; x++){
					data_address = start_address + ((initial_position_y + y) << 7) + ((initial_position_y + y) << 6) + ((initial_position_y + y) << 5) + ((initial_position_y + y) << 4) + initial_position_x + x;
					frame_data = *(DRAM_img_start_addr + data_address);
					*(PE_start_addr + (y << 5) + x) = frame_data;
				}
			}
			
			//track instuction
			*(PE_start_addr + 0x00001000) = 0x00000002;
			
			//wait for response
			for(unsigned int i = 0; i < 100; i++)
			{
				wait_for_response = i;
			}
			
			//move data from PE to DRAM and find the max value(position)
			max_value = 0;
			for(unsigned int y = 0; y < 32; y++){	
				for(unsigned int x = 0; x < 32; x++){
					data_address = (y << 5) + x;
					if(*(PE_start_addr + data_address) > max_value){
						max_value = *(PE_start_addr + data_address);
						max_x = x;
						max_y = y;
					}
				}
			}
			
			//update new position
			initial_position_x = initial_position_x + max_x - 16;
			initial_position_y = initial_position_y + max_y - 16;
			
			//store ans
			*(DRAM_ans_start_addr + (frame_num << 1) + 0) = initial_position_x;
			*(DRAM_ans_start_addr + (frame_num << 1) + 1) = initial_position_y;
			
			
			
			//move data from DRAM to PE(base on new position and train a new filter)
			start_address = (frame_num << 15) + (frame_num << 14) + (frame_num << 13) + (frame_num << 8); 
			for(unsigned int y = 0; y < 32; y++){	
				for(unsigned int x = 0; x < 32; x++){
					data_address = start_address + ((initial_position_y + y) << 7) + ((initial_position_y + y) << 6) + ((initial_position_y + y) << 5) + ((initial_position_y + y) << 4) + initial_position_x + x;
					frame_data = *(DRAM_img_start_addr + data_address);
					*(PE_start_addr + (y << 5) + x) = frame_data;
				}
			}
			
			//train instuction
			*(PE_start_addr + 0x00001000) = 0x00000001;
			
		}
	}
	return 0;
}
